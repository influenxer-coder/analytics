AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Data Collection workflow

Resources:
  StateMachineLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-CollectionStateMachineLogs
      RetentionInDays: 30

  CollectionApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod

  NotificationApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod

  ### State Machine ###
  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub ${AWS::StackName}-CollectionStateMachine
      DefinitionSubstitutions:
        ScrapeProductPageFunctionArn: !GetAtt ScrapeProductPageFunction.Arn
        SummarizeProductDetailsFunctionArn: !GetAtt SummarizeProductDetailsFunction.Arn
        ExtractKeywordsFunctionArn: !GetAtt ExtractKeywordsFunction.Arn
        BrightdataCallbackFunctionArn: !GetAtt BrightdataCallbackFunction.Arn
        CleanDataFunctionArn: !GetAtt CleanDataFunction.Arn
        IngestDataFunctionArn: !GetAtt IngestDataFunction.Arn
        NotifySlackFunctionArn: !GetAtt NotifySlackFunction.Arn
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogs.Arn
        IncludeExecutionData: true
        Level: ALL

      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref ScrapeProductPageFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref SummarizeProductDetailsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ExtractKeywordsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref BrightdataCallbackFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CleanDataFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref IngestDataFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref NotifySlackFunction
        - CloudWatchLogsFullAccess
      DefinitionUri: ./state_machine/workflow.asl.json

  ### Lambda Functions in State Machine ###
  ScrapeProductPageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ScrapeProductPageFunction
      Handler: app.lambda_handler
      Runtime: python3.13
      CodeUri: src/scrape_product_page/
      Policies:
        - AWSLambdaBasicExecutionRole
      Timeout: 90

  SummarizeProductDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SummarizeProductDetailsFunction
      Handler: app.lambda_handler
      Runtime: python3.13
      CodeUri: src/summarize_product_details/
      Policies:
        - AWSLambdaBasicExecutionRole
      Timeout: 90
      Environment:
        Variables:
          API_KEY: !Sub "{{resolve:secretsmanager:tapestry/secrets:SecretString:open_ai_api_key}}"

  ExtractKeywordsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ExtractKeywordsFunction
      Handler: app.lambda_handler
      Runtime: python3.13
      CodeUri: src/extract_keywords/
      Policies:
        - AWSLambdaBasicExecutionRole
      Timeout: 90
      Environment:
        Variables:
          API_KEY: !Sub "{{resolve:secretsmanager:tapestry/secrets:SecretString:open_ai_api_key}}"

  BrightdataCallbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-BrightdataCallbackFunction
      CodeUri: src/brightdata_callback/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies: AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          BEARER_TOKEN: !Sub "{{resolve:secretsmanager:tapestry/secrets:SecretString:brightdata_bearer_token}}"
          NOTIFICATION_URL: !Sub https://${NotificationApi}.execute-api.${AWS::Region}.amazonaws.com/prod/notification
          LIMIT_RECORDS: 1000

  CleanDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CleanDataFunction
      CodeUri: src/clean_data/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 90
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          BEARER_TOKEN: !Sub "{{resolve:secretsmanager:tapestry/secrets:SecretString:brightdata_bearer_token}}"

  IngestDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-IngestDataFunction
      CodeUri: src/ingest_data/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 90
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          API_BASE_URL: !Sub "{{resolve:secretsmanager:tapestry/secrets:SecretString:flask_app_base_url}}"

  NotifySlackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/notify_slack/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 60
      Environment:
        Variables:
          SLACK_WEBHOOK_URL: !Sub "{{resolve:secretsmanager:tapestry/secrets:SecretString:slack_webhook_url}}"
      Policies:
        - AWSLambdaBasicExecutionRole

  ### API Processor Lambda ###
  CollectionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ApiFunction
      Handler: app.lambda_handler
      Runtime: python3.13
      CodeUri: src/collection/
      Timeout: 60
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action: states:StartExecution
              Resource: !GetAtt StateMachine.Arn
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref StateMachine
      Events:
        Collection:
          Type: Api
          Properties:
            Path: /collect
            Method: POST
            RestApiId: !Ref CollectionApi

  ### Notification Lambda ###
  NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-NotificationFunction
      CodeUri: src/notification/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 90
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action: states:SendTaskSuccess
              ### Using `!GetAtt StateMachine.Arn` will create a circular dependency ###
              Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-CollectionStateMachine
      Events:
        Notification:
          Type: Api
          Properties:
            Path: /notification
            Method: POST
            RestApiId: !Ref NotificationApi

Outputs:
  StateMachineArn:
    Description: The ARN of the Collection State Machine
    Value: !Ref StateMachine

  CollectionUrl:
    Description: URL to trigger a Brightdata collection
    Value: !Sub https://${CollectionApi}.execute-api.${AWS::Region}.amazonaws.com/prod/collect
